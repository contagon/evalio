diff --git a/CMakeLists.txt b/CMakeLists.txt
index edc1edf..7ad1875 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,34 +8,17 @@ set(CMAKE_CXX_STANDARD 17)
 message(STATUS "================  BUILDING LOAM  ======================")
 
 # Dependencies
-include(FetchContent)
 # Eigen - used by ceres and during registration
 find_package(Eigen3 REQUIRED)
 # Ceres - used to solve ICF in registration 
-set(BUILD_EXAMPLES OFF CACHE BOOL "Do not build ceres examples [slow]" FORCE)
-set(BUILD_TESTING OFF CACHE BOOL "Do not build ceres tests [slow]" FORCE)
-set(PROVIDE_UNINSTALL_TARGET OFF CACHE BOOL "Do not build ceres uninstall target")
-FetchContent_Declare(
-  ceres
-  GIT_REPOSITORY https://github.com/ceres-solver/ceres-solver.git
-  GIT_TAG        2.2.0
-)
-FetchContent_MakeAvailable(ceres)
-
+find_package(Ceres CONFIG REQUIRED)
 # nanoflann is a base dependency for KNN search in the database
-set(NANOFLANN_BUILD_EXAMPLES OFF CACHE BOOL "Do not build nanoflann examples")
-set(NANOFLANN_BUILD_TESTS OFF CACHE BOOL "Do not build nanoflann tests")
-FetchContent_Declare(
-  nanoflann
-  GIT_REPOSITORY https://github.com/jlblancoc/nanoflann.git
-  GIT_TAG        v1.5.5
-)
-FetchContent_MakeAvailable(nanoflann)
+find_package(nanoflann CONFIG REQUIRED)
 
 # Define the library
 file(GLOB loam_srcs "${CMAKE_CURRENT_SOURCE_DIR}/loam/src/*.cpp")
 file(GLOB loam_hdrs "${CMAKE_CURRENT_SOURCE_DIR}/loam/include/loam/*.h")
-add_library(loam SHARED ${loam_srcs} ${loam_hdrs})
+add_library(loam STATIC ${loam_srcs} ${loam_hdrs})
 target_link_libraries(loam PUBLIC Eigen3::Eigen Ceres::ceres nanoflann::nanoflann)
 target_include_directories(loam PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/loam/include")
 
diff --git a/loam/src/geometry.cpp b/loam/src/geometry.cpp
index 4f3f870..88e2ced 100644
--- a/loam/src/geometry.cpp
+++ b/loam/src/geometry.cpp
@@ -53,7 +53,7 @@ std::pair<Line, double> fitLine(Eigen::MatrixXd points) {
   Line line(center + 0.1 * line_direction, center - 0.1 * line_direction);
   // Compute the condition number being careful to avoid a division by zero
   double condition_number = std::numeric_limits<double>::max();
-  if (pca.eigenvalues()(2) > 1e-12) pca.eigenvalues()(2) / pca.eigenvalues()(0);
+  // if (pca.eigenvalues()(2) > 1e-12) pca.eigenvalues()(2) / pca.eigenvalues()(0);
 
   return std::make_pair(line, condition_number);
 }
