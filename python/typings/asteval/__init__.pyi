"""
This type stub file was generated by pyright.
"""

from typing import Any, Iterable, Optional

class Interpreter:
    """create an asteval Interpreter: a restricted, simplified interpreter
    of mathematical expressions using Python syntax.

    Parameters
    ----------
    symtable : dict or `None`
        dictionary or SymbolTable to use as symbol table (if `None`, one will be created).
    nested_symtable : bool, optional
        whether to use a new-style nested symbol table instead of a plain dict [False]
    user_symbols : dict or `None`
        dictionary of user-defined symbols to add to symbol table.
    writer : file-like or `None`
        callable file-like object where standard output will be sent.
    err_writer : file-like or `None`
        callable file-like object where standard error will be sent.
    use_numpy : bool
        whether to use functions from numpy.
    max_statement_length : int
        maximum length of expression allowed [50,000 characters]
    readonly_symbols : iterable or `None`
        symbols that the user can not assign to
    builtins_readonly : bool
        whether to blacklist all symbols that are in the initial symtable
    minimal : bool
        create a minimal interpreter: disable many nodes (see Note 1).
    config : dict
        dictionay listing which nodes to support (see note 2))

    Notes
    -----
    1. setting `minimal=True` is equivalent to setting a config with the following
       nodes disabled: ('import', 'importfrom', 'if', 'for', 'while', 'try', 'with',
       'functiondef', 'ifexp', 'listcomp', 'dictcomp', 'setcomp', 'augassign',
       'assert', 'delete', 'raise', 'print')
    2. by default 'import' and 'importfrom' are disabled, though they can be enabled.
    """
    def __init__(
        self,
        symtable: dict[Any, Any] = ...,
        nested_symtable: bool = ...,
        user_symbols: dict[Any, Any] = ...,
        writer: Optional[Any] = ...,
        err_writer: Optional[Any] = ...,
        use_numpy: bool = ...,
        max_statement_length: int = ...,
        minimal: bool = ...,
        readonly_symbols: Optional[Iterable[str]] = ...,
        builtins_readonly: bool = ...,
        config: dict[str, Any] = ...,
        **kws: dict[Any, Any],
    ) -> None:
        pass

    def eval(
        self,
        expr: str,
        lineno: int = ...,
        show_errors: bool = ...,
        raise_errors: bool = ...,
    ) -> Any:
        """Evaluate a single statement."""
        ...

__all__ = [
    "Interpreter",
]
