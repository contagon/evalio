name: Release

on:
  push:
    tags:
      - "v*.*.*"


jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/.vcpkg_cache"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      # Let vcpkg store caches in github actions
      - name: Restore vcpkg cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          key: vcpkg-${{ matrix.os }}
      - name: Ensure vcpkg cache directory exists
        run: mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"

      # Do all the building
      - run: ./cpp/setup_pipelines.sh
        name: Clone pipelines & vcpkg
      - uses: pypa/cibuildwheel@v2.23.0
        name: Build wheel
        env:
          # for vcpkg caches
          CIBW_ENVIRONMENT_LINUX : VCPKG_DEFAULT_BINARY_CACHE="/host${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"

      # Delete the old cache on hit to emulate a cache update. See
      # https://github.com/actions/cache/issues/342.
      - name: Delete old cache
        env:
          GH_TOKEN: ${{ github.token }}
        if: steps.cache.outputs.cache-hit 
        # Using `--repo` makes it so that this step doesn't require checking out the repo first.
        run: gh cache delete --repo ${{ github.repository }} ${{ steps.cache.outputs.cache-primary-key }}

      # cache vcpkg
      - name: Save vcpkg cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          key: vcpkg-${{ matrix.os }}

      # upload to use in other jobs
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/evalio
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        name: Download wheels
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1
        name: Upload wheels

  release:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        name: Download wheels
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: dist/*

  docs:
    runs-on: ubuntu-latest
    env:
      UV_NO_EDITABLE: true
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          fetch-depth: 0

      # Setup C++ dependencies
      - run: ./cpp/setup_pipelines.sh
        name: Clone pipelines & vcpkg
      - uses: TAServers/vcpkg-cache@v3
        name: Setup vcpkg cache
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Python dependencies
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install the project
        run: uv sync --dev --verbose
        env:
          VCPKG_FEATURE_FLAGS: "binarycaching" # Possibly redundant, but explicitly sets the binary caching feature flag
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"

      # Setup git
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      # Finally deploy docs
      - name: Get version
        run: echo "EVALIO_VERSION=$(python -c 'import evalio; print(evalio.__version__)')" >> $GITHUB_ENV
      - name: Deploy docs
        run: mike deploy --push --update-aliases $EVALIO_VERSION stable