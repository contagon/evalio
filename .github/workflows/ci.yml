on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

jobs:
  # check python formatting
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - uses: astral-sh/ruff-action@v3
        name: Ruff

  # check cpp formatting
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name: Checkout
    - uses: jidicula/clang-format-action@v4.14.0
      name: Clang-Format
      with:
        clang-format-version: '20'

  # run tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --dev
      - name: Run tests
        run: uv run pytest -v

  # make sure everything still builds, but only once per system
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        # os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      # If things fail, this allows us to ssh in to fix things
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      #   if: runner.debug == '1'
      #   with:
      #     detached: true

      # Let vcpkg store caches in github actions
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      # Do all the building
      - run: ./cpp/setup_pipelines.sh
        if: matrix.os != 'windows-latest'
        name: Clone pipelines & vcpkg
      - run: ./cpp/setup_pipelines.bat
        if: matrix.os == 'windows-latest'
        name: Clone pipelines & vcpkg

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - uses: pypa/cibuildwheel@v2.23.0
        name: Build wheel
        env:
          CIBW_BUILD_FRONTEND: "build[uv]"
          CIBW_BUILD: "cp311-manylinux_x86_64 cp311-win_amd64 cp313-macosx_x86_64 cp311-macosx_arm64"
          CIBW_BUILD_VERBOSITY: 1
          # for vcpkg caches
          CIBW_ENVIRONMENT: VCPKG_BINARY_SOURCES="clear;x-gha,readwrite" ACTIONS_CACHE_URL="$ACTIONS_CACHE_URL" ACTIONS_RUNTIME_TOKEN="$ACTIONS_RUNTIME_TOKEN"
          CIBW_ENVIRONMENT_PASS_LINUX: VCPKG_BINARY_SOURCES ACTIONS_CACHE_URL ACTIONS_RUNTIME_TOKEN