on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  # check python formatting
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - uses: astral-sh/ruff-action@v3
        name: Ruff

  # check cpp formatting
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name: Checkout
    - uses: jidicula/clang-format-action@v4.14.0
      name: Clang-Format
      with:
        clang-format-version: '20'

  # run tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --dev
      - name: Run tests
        run: uv run pytest -v

  # make sure everything still builds, but only once per system
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        # os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]
        os: [ubuntu-latest,  windows-latest, macos-13]
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      # If things fail, this allows us to ssh in to fix things
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      # Restore vcpkg
      - name: Restore vcpkg
        id: cache-vcpkg-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            .vcpkg
            .vcpkg_installed
          key: ${{ runner.os }}-vcpkg

      # Do all the building
      - run: ./setup_pipelines.sh
        name: Clone pipelines & vcpkg
      - uses: pypa/cibuildwheel@v2.23.0
        name: Build wheel
        env:
          CIBW_BUILD: cp311-manylinux_x86_64
          CIBW_BUILD_VERBOSITY: 3

      # save vcpkg
      - name: Save vcpkg
        id: cache-vcpkg-save
        # make sure we always save the vcpkg cache
        if: always()
        # always save vcpkg cache unless there is already a cache, then don't bother
        # if: always() && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            .vcpkg
            .vcpkg_installed
          key: ${{ steps.cache-vcpkg-restore.outputs.cache-primary-key }}
