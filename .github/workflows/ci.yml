name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # check python formatting
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - uses: astral-sh/ruff-action@v3
        name: Ruff

  # check cpp formatting
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name: Checkout
    - uses: jidicula/clang-format-action@v4.14.0
      name: Clang-Format
      with:
        clang-format-version: '20'

  # if it was a push to master, update latest
  docs:
    runs-on: ubuntu-latest
    # if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      # Setup C++ dependencies
      - run: ./cpp/setup_pipelines.sh
        name: Clone pipelines & vcpkg
      - uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Python dependencies
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install the project
        run: uv sync --dev --verbose --no-editable
        env:
          VCPKG_FEATURE_FLAGS: "binarycaching" # Possibly redundant, but explicitly sets the binary caching feature flag
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true

      # Finally, deploy docs
      # - name: Deploy docs
      #   run: uv run mike deploy --push --update-aliases latest

  # run tests on both mac and ubuntu, across all python versions
  test:
    runs-on: ${{ matrix.os }}
    # We turn off stub generations, as there is some strange bug on github actions
    # where an editable install with stubs obscures the _cpp.so module and it can't be imported
    env:
      SKBUILD_CMAKE_DEFINE: EVALIO_PYTHON_STUBS=OFF
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-14
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --dev --verbose
      - name: Run tests
        run: uv run pytest -v

  # make sure everything still builds, but only one python per system
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      # Do all the building
      - run: ./cpp/setup_pipelines.sh
        name: Clone pipelines & vcpkg

      # Restore vcpkg cache
      - uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: pypa/cibuildwheel@v2.23.0
        name: Build wheel
        env:
          CIBW_BUILD: "cp311-manylinux_x86_64 cp311-macosx_x86_64 cp311-macosx_arm64"
          # for vcpkg caches
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET="11"
            VCPKG_FEATURE_FLAGS="binarycaching" 
            VCPKG_BINARY_SOURCES="clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
          CIBW_ENVIRONMENT_LINUX: >
            VCPKG_FEATURE_FLAGS="binarycaching" 
            VCPKG_BINARY_SOURCES="clear;files,/host${{ steps.vcpkg-cache.outputs.path }},readwrite"

      # save artifacts for testing
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
