name: CI

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

jobs:
  # check python formatting
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - uses: astral-sh/ruff-action@v3
        name: Ruff

  # check cpp formatting
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name: Checkout
    - uses: jidicula/clang-format-action@v4.14.0
      name: Clang-Format
      with:
        clang-format-version: '20'

  # run tests on both mac and ubuntu, across all python versions
  test:
    runs-on: ${{ matrix.os }}
    # We turn off stub generations, as there is some strange bug on github actions
    # where an editable install with stubs obscures the _cpp.so module and it can't be imported
    env:
      SKBUILD_CMAKE_DEFINE: EVALIO_PYTHON_STUBS=OFF
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-14
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install the project
        run: uv sync --dev --verbose
      - name: Run tests
        run: uv run pytest -v

  # make sure everything still builds, but only one python per system
  build:
    runs-on: ${{ matrix.os }}
    env: 
      USERNAME: contagon
      VCPKG_EXE: ${{ github.workspace }}/.vcpkg/vcpkg
      FEED_URL: https://nuget.pkg.github.com/contagon/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/contagon/index.json,readwrite"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      # Do all the building
      - run: ./cpp/setup_pipelines.sh
        name: Clone pipelines & vcpkg

      # setup vcpkg cache
      - name: Add NuGet sources
        shell: pwsh
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - uses: pypa/cibuildwheel@v2.23.0
        name: Build wheel
        env:
          CIBW_BUILD: "cp311-manylinux_x86_64 cp311-macosx_x86_64 cp311-macosx_arm64"
          # for vcpkg caches
          # TODO: See if I can remove these
          CIBW_ENVIRONMENT: VCPKG_BINARY_SOURCES="$VCPKG_BINARY_SOURCES" 
          CIBW_ENVIRONMENT_PASS_LINUX: VCPKG_BINARY_SOURCES

      # cache vcpkg
      - name: Save vcpkg cache
        uses: actions/cache/save@v4
        with:
          path: ./.vcpkg_cache
          key: vcpkg-${{ runner.os }}

      # save artifacts for testing
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl